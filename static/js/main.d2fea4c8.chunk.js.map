{"version":3,"sources":["Tweets/Tweet.jsx","Tweets/Tweets.jsx","UserInput/UserInput.jsx","App.js","serviceWorker.js","index.js"],"names":["props","className","href","tweet","id","data-conversation","data-theme","lang","dir","full_text","useState","tweets","setTweets","useEffect","a","axios","get","search","result","data","fetchData","map","t","type","onChange","changed","value","App","setSearch","UserInput","event","target","length","Tweets","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gUAGe,G,MAAA,SAACA,GACd,OACE,uBACEC,UAAU,eACVC,KAAI,mDAA8CF,EAAMG,MAAMC,KAE9D,gCACEH,UAAU,gBACVI,oBAAkB,OAClBC,aAAW,SAEX,uBAAGC,KAAK,KAAKC,IAAI,OACdR,EAAMG,MAAMM,WANjB,gDCJS,WAACT,GAAW,IAAD,EACIU,mBAAS,IADb,mBACjBC,EADiB,KACTC,EADS,KAcxB,OAXAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IAAMC,IAAN,6EACmDhB,EAAMiB,SAF9D,OACVC,EADU,OAIhBN,EAAUM,EAAOC,MAJD,2CAAH,qDAOfC,MAGKT,EAAOU,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAOnB,MAAOmB,QCjB1B,WAACtB,GAEd,OACE,yBAAKC,UAAU,aACb,2BAAOsB,KAAK,OAAOC,SAAUxB,EAAMyB,QAASC,MAAO1B,EAAMiB,WC0BhDU,MA3Bf,WAAgB,IAAD,EACejB,qBADf,mBACNO,EADM,KACEW,EADF,KAYb,OACE,6BAAS3B,UAAU,OACjB,6BACE,8DAEF,6BACE,kBAAC4B,EAAD,CAAWJ,QAfa,SAACK,GAC7BF,EAAUE,EAAMC,OAAOL,QAcwBT,OAAQA,KAErD,yBAAKhB,UAAU,UACZgB,GAAUA,EAAOe,OAAS,EAAI,kBAACC,EAAD,CAAQhB,OAAQA,IAAa,QCdhDiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2fea4c8.chunk.js","sourcesContent":["import React from 'react';\nimport './Tweet.css';\n\nexport default (props) => {\n  return (\n    <a\n      className=\"twitter-link\"\n      href={`https://twitter.com/jairbolsonaro/status/${props.tweet.id}`}\n    >\n      <blockquote\n        className=\"twitter-tweet\"\n        data-conversation=\"none\"\n        data-theme=\"light\"\n      >\n        <p lang=\"pt\" dir=\"ltr\">\n          {props.tweet.full_text}\n        </p>\n        &mdash; Jair M. Bolsonaro (@jairbolsonaro)\n      </blockquote>\n    </a>\n  );\n};\n","import axios from 'axios';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport Tweet from './Tweet';\n\nexport default (props) => {\n  const [tweets, setTweets] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios.get(\n        `http://ec2-54-90-44-124.compute-1.amazonaws.com:3000/tweets?search=${props.search}`\n      );\n      setTweets(result.data);\n    };\n\n    fetchData();\n  });\n\n  return tweets.map((t) => <Tweet tweet={t}></Tweet>);\n};\n","import React from 'react';\n\nexport default (props) => {\n  //   const [search] = useState('');\n  return (\n    <div className=\"userInput\">\n      <input type=\"text\" onChange={props.changed} value={props.search} />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport Tweets from './Tweets/Tweets';\nimport UserInput from './UserInput/UserInput';\n\nfunction App() {\n  const [search, setSearch] = useState();\n\n  const changeUsernameHandler = (event) => {\n    setSearch(event.target.value);\n  };\n\n  // const script = document.createElement('script');\n  // script.src = 'https://platform.twitter.com/widgets.js';\n  // script.async = true;\n  // document.body.appendChild(script);\n\n  return (\n    <section className=\"App\">\n      <div>\n        <h1>Arquivo de Tweets - Bolsonaro</h1>\n      </div>\n      <div>\n        <UserInput changed={changeUsernameHandler} search={search} />\n      </div>\n      <div className=\"Tweets\">\n        {search && search.length > 3 ? <Tweets search={search} /> : null}\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}